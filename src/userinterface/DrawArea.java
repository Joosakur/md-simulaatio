package userinterface;


import java.awt.Color;
import java.awt.Graphics;
import kandisimulaatiojava.*;

class DrawArea extends javax.swing.JPanel {

    public static Simulation simulation1 = null;
    public static Simulation simulation2 = null;
    
    private boolean drawSim1 = true;
    private boolean drawSim2 = true;
    
    
    
    public DrawArea() {
        initComponents();
    }

    @Override
    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        int x, y, size;
        double cs = simulation1.getSimulationCellSize();
        g.setColor(Color.BLACK);
        g.drawLine(0, 0, 800, 0);
        g.drawLine(0, 799, 800, 799);
        g.drawLine(799, 0, 799, 800);
        g.drawLine(0, 0, 0, 800);
        
        if(simulation1.getAtoms()==null || simulation2.getAtoms()==null) return;
        if(simulation1.getTime()==0 || simulation2.getTime()==0) return;
        
        if(drawSim1){
            for(Atom a : simulation1.getAtoms()){
                x = (int)(this.getWidth()*a.getPosition()[0]/cs);
                y = (int)(this.getHeight()*a.getPosition()[1]/cs);
                size = (int)((100.0/simulation1.getNumberOfLatticeCells())*a.getPosition()[2]/cs)+5;
                g.setColor(Color.GRAY);
                g.fillOval(x-size/2, y-size/2, size, size);
                g.setColor(Color.BLACK);
                g.drawOval(x-size/2, y-size/2, size, size);
            }
        }
        
        if(drawSim2){
            for(Atom a : simulation2.getAtoms()){
                x = (int)(this.getWidth()*a.getPosition()[0]/cs);
                y = (int)(this.getHeight()*a.getPosition()[1]/cs);
                size = (int)((100.0/simulation1.getNumberOfLatticeCells())*a.getPosition()[2]/cs)+5;
                g.setColor(Color.BLUE);
                g.fillOval(x-size/2, y-size/2, size, size);
                g.setColor(Color.BLACK);
                g.drawOval(x-size/2, y-size/2, size, size);
            }
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
